{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "EPIC mail",
    "description": "This is an API documentation for a web aplication named EPIC mail. It will cater for the Messaging needs of users who sign up on it"
  },
  "schemes": [
    "https"
  ],
  "host": "epic-mail-application.herokuapp.com",
  "basePath": "/api/v1",
  "paths": {
    "/users/save": {
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update user credentials",
        "description": "Upload User image",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "file to upload",
            "required": false,
            "type": "file"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "password to update",
            "required": false,
            "type": "string"
          },
          {
            "name": "confirmPassword",
            "in": "formData",
            "description": "confirm password to update",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User succesfully updated and receives credential info.",
            "schema": {
              "$ref": "#/definitions/returnNewUserData"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/users/contact": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all Contacts",
        "description": "Returns a list of contact users.",
        "responses": {
          "200": {
            "description": "A list of contacts",
            "schema": {
              "$ref": "#/definitions/returnContactData"
            }
          },
          "400": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Gets Authorization",
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Signs in User.",
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "description": "password to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "user password",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User succesfully sign in and receives a token.",
            "schema": {
              "$ref": "#/definitions/returnNewUserData"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Gets Authorization",
        "description": "Signs in User.",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "The user to Authorize.",
            "schema": {
              "$ref": "#/definitions/SendNewUserData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User succesfully sign in and receives a token.",
            "schema": {
              "$ref": "#/definitions/returnNewUserData"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/auth/reset": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "send password reset message",
        "description": "send password reset message to recovery mail",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "description": "The email to reset password for.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User succesfully sign in and receives a token.",
            "schema": {
              "$ref": "#/definitions/returnResetSent"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "validate password reset token",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "password reset token.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "token successfully validated.",
            "schema": {
              "$ref": "#/definitions/returnResetConfirm"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/messages": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Gets all Received messages",
        "description": "Returns a list of received messages.",
        "responses": {
          "200": {
            "description": "A list of received messages",
            "schema": {
              "$ref": "#/definitions/returnMessageData"
            }
          },
          "400": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Send a Message",
        "description": "Creates and Sends a message.",
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "description": "The message to send.",
            "schema": {
              "$ref": "#/definitions/SendMessage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Sent message has been Created.",
            "schema": {
              "$ref": "#/definitions/returnMessageData"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/messages/save": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Send a Message as Draft",
        "description": "Creates and Saves a message.",
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "description": "The message to save.",
            "schema": {
              "$ref": "#/definitions/SendMessage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Draft message has been Created.",
            "schema": {
              "$ref": "#/definitions/returnMessageData"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/messages/all": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Gets all messages",
        "description": "Returns a list of all messages.",
        "responses": {
          "200": {
            "description": "A list of all messages",
            "schema": {
              "$ref": "#/definitions/returnMessageData"
            }
          },
          "400": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/messages/read": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Gets all Read messages",
        "description": "Returns a list of all Read messages.",
        "responses": {
          "200": {
            "description": "A list of all Read messages",
            "schema": {
              "$ref": "#/definitions/returnMessageData"
            }
          },
          "400": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/messages/sent": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Gets all Sent messages",
        "description": "Returns a list of all Sent messages.",
        "responses": {
          "200": {
            "description": "A list of all Sent messages",
            "schema": {
              "$ref": "#/definitions/returnMessageData"
            }
          },
          "400": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/messages/unread": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Gets all Unread messages",
        "description": "Returns a list of all Unread messages.",
        "responses": {
          "200": {
            "description": "A list of all Unread messages",
            "schema": {
              "$ref": "#/definitions/returnMessageData"
            }
          },
          "400": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/messages/draft": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Gets all Draft messages",
        "description": "Returns a list of all Draft messages.",
        "responses": {
          "200": {
            "description": "A list of all Draft messages",
            "schema": {
              "$ref": "#/definitions/returnMessageData"
            }
          },
          "400": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/messages/{id}": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Gets Single message by id",
        "description": "Returns a single message.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The message Id",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A Single Message in a data key within a response object",
            "schema": {
              "$ref": "#/definitions/returnMessageData"
            }
          },
          "400": {
            "description": "Invalid token, in an error key within a response object",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access, in an error key within a response object",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "404": {
            "description": "message ID does not exist",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      },
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "send Draft Message",
        "description": "Creates and Sends a message.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The Draft message Id",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Sent message has been Created",
            "schema": {
              "$ref": "#/definitions/returnMessageData"
            }
          },
          "400": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "messages"
        ],
        "summary": "Update sent/draft messages",
        "description": "updates sent and draft messages",
        "operationId": "updatemessages",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The message Id",
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated message object",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "message successfully updated",
            "schema": {
              "$ref": "#/definitions/returnMessageData"
            }
          },
          "400": {
            "description": "Invalid message ID supplied",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "404": {
            "description": "message ID not found",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "messages"
        ],
        "summary": "Deletes a message",
        "description": "Deletes a message by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Message id to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "schema": {
              "$ref": "#/definitions/returnDeleteMessageData"
            }
          },
          "400": {
            "description": "Invalid token, in an error key within a response object",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access,",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "404": {
            "description": "message ID does not exist",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/groups": {
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "create a group",
        "description": "Creates a group.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "description": "Created new group",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns created group",
            "schema": {
              "$ref": "#/definitions/returnGroupData"
            }
          },
          "400": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Gets groups",
        "description": "Returns groups created by a user.",
        "responses": {
          "200": {
            "description": "returns all groups created by user",
            "schema": {
              "$ref": "#/definitions/returnGroupData"
            }
          },
          "400": {
            "description": "Invalid token, in an error key within a response object",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access, in an error key within a response object",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/groups/:id/users": {
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Add user to a group",
        "description": "adds a user to a group.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "email",
            "type": "string",
            "description": "user to be added to group",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "all group members get returned",
            "schema": {
              "$ref": "#/definitions/returnGroupMemberData"
            }
          },
          "400": {
            "description": "Invalid token",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      },
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get all group members",
        "description": "Returns group members added by a user.",
        "responses": {
          "200": {
            "description": "all group members get returned",
            "schema": {
              "$ref": "#/definitions/returnGroupMemberData"
            }
          },
          "400": {
            "description": "Invalid token, in an error key within a response object",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "401": {
            "description": "Unauthorized Access, in an error key within a response object",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "404": {
            "description": "group ID not found",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/groups/:id/name": {
      "patch": {
        "tags": [
          "groups"
        ],
        "summary": "Update group name",
        "description": "updates the name of a group by id",
        "operationId": "patchgroupjson",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The message Id",
            "type": "integer"
          },
          {
            "in": "formData",
            "name": "name",
            "type": "string",
            "description": "group name to change to",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns updated group",
            "schema": {
              "$ref": "#/definitions/returnMessageData"
            }
          },
          "400": {
            "description": "Invalid group name supplied",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "404": {
            "description": "group ID not found",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/groups/:id": {
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "delete group by id",
        "description": "delete group by id",
        "operationId": "deletegroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "the group id",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "returns message to confirm delete",
            "schema": {
              "$ref": "#/definitions/returnDeleteMessageData"
            }
          },
          "400": {
            "description": "Invalid id param supplied",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "404": {
            "description": "group ID not found",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    },
    "/groups/:id/users/:userid": {
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "delete groupmember by id",
        "description": "delete group member from a group by id",
        "operationId": "deletegroupmember",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "the group id",
            "type": "integer"
          },
          {
            "name": "userid",
            "in": "path",
            "description": "the user id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "returns message to confirm delete",
            "schema": {
              "$ref": "#/definitions/returnDeleteMessageData"
            }
          },
          "400": {
            "description": "Invalid id or userid param supplied",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          },
          "404": {
            "description": "group ID or user ID not found",
            "schema": {
              "$ref": "#/definitions/returnError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ResetConfirm": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "ResetSent": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "GroupMemberData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "dp": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "DeleteMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "SendMessage": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "parentMessageId": {
          "type": "string"
        }
      },
      "xml": {
        "name": "NewUserData"
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createdOn": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "receiverId": {
          "type": "string"
        },
        "senderId": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "parentMessageId": {
          "type": "string"
        },
        "visible": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "senttime": {
          "type": "string"
        },
        "dp": {
          "type": "string"
        }
      },
      "xml": {
        "name": "NewUserData"
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "format": "int64"
        }
      },
      "xml": {
        "name": "NewUserData"
      }
    },
    "UpdateMessage": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "xml": {
        "name": "NewUserData"
      }
    },
    "ContactType": {
      "type": "object",
      "properties": {
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        }
      },
      "xml": {
        "name": "ContactType"
      }
    },
    "SendNewUserData": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "recoveryEmail": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "confirmPassword": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "returnResetConfirm": {
      "type": "object",
      "required": [
        "status",
        "data"
      ],
      "properties": {
        "status": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResetConfirm"
          }
        }
      }
    },
    "returnResetSent": {
      "type": "object",
      "required": [
        "status",
        "data"
      ],
      "properties": {
        "status": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResetSent"
          }
        }
      }
    },
    "returnGroupMemberData": {
      "type": "object",
      "required": [
        "status",
        "data"
      ],
      "properties": {
        "status": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupMemberData"
          }
        }
      }
    },
    "returnMessageData": {
      "type": "object",
      "required": [
        "status",
        "data"
      ],
      "properties": {
        "status": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "returnGroupData": {
      "type": "object",
      "required": [
        "status",
        "data"
      ],
      "properties": {
        "status": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        }
      }
    },
    "returnContactData": {
      "type": "object",
      "required": [
        "status",
        "data"
      ],
      "properties": {
        "status": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactType"
          }
        }
      }
    },
    "returnDeleteMessageData": {
      "type": "object",
      "required": [
        "status",
        "data"
      ],
      "properties": {
        "status": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeleteMessage"
          }
        }
      }
    },
    "returnError": {
      "type": "object",
      "required": [
        "status",
        "error"
      ],
      "properties": {
        "status": {
          "type": "integer",
          "format": "int64"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "NewUserData": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phonenumber": {
          "type": "string"
        },
        "recoveryemail": {
          "type": "string"
        },
        "id": {
          "type": "number"
        },
        "dp": {
          "type": "string"
        }
      },
      "xml": {
        "name": "NewUserData"
      }
    },
    "returnNewUserData": {
      "type": "object",
      "required": [
        "status",
        "data"
      ],
      "properties": {
        "status": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NewUserData"
          }
        }
      }
    }
  }
}